{
  "openapi": "3.0.1",
  "info": {
    "title": "Pet Support API",
    "version": "v1"
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "servers": [
    {
      "url": "https://petssuport4815162342api.onrender.com/api"
    },
    {
      "url": "http://localhost:3000/api"
    }
  ],
  "tags": [
    {
      "name": "Users"
    },
    {
      "name": "Pets"
    },
    {
      "name": "News"
    },
    {
      "name": "Notices"
    },
    {
      "name": "Friends"
    }
  ],

  "paths": {
    "/users/signup": {
      "post": {
        "summary": "Create user",
        "tags": ["Users"],
        "requestBody": {
          "required": true,
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/definitions/signupRequest" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/definitions/emailResponses" }
              }
            }
          },
          "409": { "description": "Email in use" }
        }
      }
    },
    "/users/login": {
      "post": {
        "summary": "Logs user into the system",
        "tags": ["Users"],
        "requestBody": {
          "required": true,
          "description": "object with email and password",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/definitions/loginRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": { "type": "string" }
                  }
                }
              }
            }
          },
          "401": {
            "description": "password/email is wrong or email is not verified"
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "summary": "Current User",
        "tags": ["Users"],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "401": { "description": "Not authorized or token invalid" }
        }
      }
    },
    "/users/update": {
      "patch": {
        "summary": "Update user",
        "tags": ["Users"],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "required": true,
          "description": "object with updated fields, all fields are optional",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/definitions/updateUserData" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/definitions/updateUserData" }
              }
            }
          },
          "400": { "description": "\"\" is not allowed" },
          "401": { "description": "Not authorized or token invalid" }
        }
      }
    },
    "/users/upload": {
      "patch": {
        "summary": "Uploads the user's avatar",
        "tags": ["Users"],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "avatar": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": { "type": "string" },
                    "avatarURL": { "type": "string" }
                  }
                }
              }
            }
          },
          "401": { "description": "Not authorized or token invalid" }
        }
      }
    },
    "/users/logout": {
      "get": {
        "summary": "Logs out current logged in user session",
        "tags": ["Users"],
        "security": [{ "Bearer": [] }],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "401": { "description": "Not authorized or token invalid" }
        }
      }
    },
    "/users/{verificationToken}": {
      "get": {
        "summary": "Email verification by token",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "verificationToken",
            "in": "path",
            "required": true,
            "description": "User verificationToken",
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzY2MxYzI5NDcyMzQ4Njc3OTViMjlhNCIsImlhdCI6MTY3NTAxNjc1NywiZXhwIjoxNjc1MDQ1NTU3fQ._Em1_v9Ii4xNN5DFfLu95g0Boe3ZBobaTV8Ao2wyLnc"
            }
          }
        ],
        "responses": {
          "200": { "description": "Verification successful" },
          "404": { "description": "User not found" }
        }
      }
    },
    "/users/verify": {
      "post": {
        "summary": "Retry email verification",
        "tags": ["Users"],
        "requestBody": {
          "required": true,
          "description": "object body with email",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/definitions/emailResponses" }
            }
          }
        },
        "responses": {
          "200": { "description": "Verification email sent" },
          "400": {
            "description": "Request body missing required field email or Verification has already been passed"
          },
          "404": { "description": "User not found" }
        }
      }
    },
    "/friends": {
      "get": {
        "summary": "Our friends",
        "tags": ["Friends"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Friends" }
              }
            }
          }
        }
      }
    },
    "/news": {
      "get": {
        "summary": "Get news",
        "tags": ["News"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/News" }
              }
            }
          }
        }
      }
    },
    "/pets": {
      "post": {
        "summary": "Create pet object",
        "tags": ["Pets"],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "required": true,
          "description": "Created pet object",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/definitions/petRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Pets" }
              }
            }
          },
          "400": { "description": "Unable to create new Pet" },
          "401": { "description": "Not authorized or token invalid" }
        }
      }
    },
    "/pets/{petId}": {
      "delete": {
        "summary": "Delete pet by id",
        "tags": ["Pets"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "required": true,
            "description": "Pet id",
            "schema": {
              "type": "string",
              "example": "63ee9215d22829d9f530e6b3"
            }
          }
        ],
        "responses": {
          "200": { "description": "Pet deleted" },
          "404": { "description": "Pet not found" },
          "401": { "description": "Not authorized or token invalid" }
        }
      }
    },
    "/pets/{petId}/upload": {
      "patch": {
        "summary": "Uploads an image of a pet",
        "tags": ["Pets"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "required": true,
            "description": "pet id",
            "schema": {
              "type": "string",
              "example": "63ee9215d22829d9f530e6b3"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "petImage": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": { "type": "string" },
                    "petImage": { "type": "string" }
                  }
                }
              }
            }
          },
          "401": { "description": "Not authorized or token invalid" },
          "404": { "description": "Pet not found" }
        }
      }
    },
    "/notices/{category}": {
      "get": {
        "summary": "Notices by category",
        "tags": ["Notices"],
        "parameters": [
          {
            "name": "category",
            "in": "path",
            "required": true,
            "description": "selected category",
            "schema": {
              "type": "string",
              "example": "sell"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Notices" }
              }
            }
          }
        }
      }
    },
    "/notices/{category}/p": {
      "get": {
        "summary": "Notices by category and pagination",
        "tags": ["Notices"],
        "parameters": [
          {
            "name": "category",
            "in": "path",
            "required": true,
            "description": "selected category",
            "schema": {
              "type": "string",
              "example": "sell"
            }
          },
          {
            "name": "page",
            "in": "query",

            "description": "number of page",
            "schema": {
              "type": "string",
              "example": "page=1"
            }
          },
          {
            "name": "limit",
            "in": "query",

            "description": "number of items per page",
            "schema": {
              "type": "string",
              "example": "limit=20"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Notices" }
              }
            }
          }
        }
      }
    },
    "/notices/all/find": {
      "get": {
        "summary": "Notices by title",
        "tags": ["Notices"],
        "parameters": [
          {
            "name": "search",
            "in": "query",

            "description": "keyword search in titles",
            "schema": {
              "type": "string",
              "example": "fat cat"
            }
          },
          {
            "name": "page",
            "in": "query",

            "description": "number of page",
            "schema": {
              "type": "string",
              "example": "page=1"
            }
          },
          {
            "name": "limit",
            "in": "query",

            "description": "number of items per page",
            "schema": {
              "type": "string",
              "example": "limit=20"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Notices" }
              }
            }
          }
        }
      }
    },
    "/notices/id/{noticeId}": {
      "get": {
        "summary": "Get notice by id",
        "tags": ["Notices"],
        "parameters": [
          {
            "name": "noticeId",
            "in": "path",
            "required": true,
            "description": "notice id",
            "schema": {
              "type": "string",
              "example": "63ee9215d22829d9f530e6b3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Notice" }
              }
            }
          },
          "404": { "description": "Notice not found" }
        }
      }
    },
    "/notices/{noticeId}/favorite": {
      "post": {
        "summary": "Add notice to favorite",
        "tags": ["Notices"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "noticeId",
            "in": "path",
            "required": true,
            "description": "notice id",
            "schema": {
              "type": "string",
              "example": "63ee9215d22829d9f530e6b3"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Notice" }
              }
            }
          },
          "400": { "description": "Already in favorites" },
          "401": { "description": "Not authorized or token invalid" },
          "404": { "description": "Notice not found" }
        }
      },
      "delete": {
        "summary": "Remove notice from favorites",
        "tags": ["Notices"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "noticeId",
            "in": "path",
            "required": true,
            "description": "notice id",
            "schema": {
              "type": "string",
              "example": "63ee9215d22829d9f530e6b3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Notices" }
              }
            }
          },
          "401": { "description": "Not authorized or token invalid" },
          "404": { "description": "Notice not found" }
        }
      }
    },
    "/notices/{userId}/favorite": {
      "get": {
        "summary": "Get user favorite notices",
        "tags": ["Notices"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "user id",
            "schema": {
              "type": "string",
              "example": "63ee9215d22829d9f530e6b3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Notices" }
              }
            }
          },
          "401": { "description": "Not authorized or token invalid" }
        }
      }
    },
    "/notices/{categoryName}": {
      "post": {
        "summary": "Create new notice by categoryName",
        "tags": ["Notices"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "categoryName",
            "in": "path",
            "required": true,
            "description": "selected category",
            "schema": {
              "type": "string",
              "example": "sell"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Notice" }
              }
            }
          },
          "400": { "description": "Creating error" },
          "401": { "description": "Not authorized or token invalid" }
        }
      }
    },
    "/notices/own/{userId}": {
      "get": {
        "summary": "Get user notices",
        "tags": ["Notices"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "user id",
            "schema": {
              "type": "string",
              "example": "63ee9215d22829d9f530e6b3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Notices" }
              }
            }
          },
          "401": { "description": "Not authorized or token invalid" }
        }
      }
    },
    "/notices/own/{noticeId}": {
      "delete": {
        "summary": "Delete selected notice",
        "tags": ["Notices"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "noticeId",
            "in": "path",
            "required": true,
            "description": "notices id",
            "schema": {
              "type": "string",
              "example": "63ee9215d22829d9f530e6b3"
            }
          }
        ],
        "responses": {
          "200": { "description": "Notice deleted" },
          "401": { "description": "Not authorized or token invalid" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not found notice by this id" }
        }
      }
    },
    "/notices/{noticeId}/upload": {
      "patch": {
        "summary": "Uploads an image",
        "tags": ["Notices"],
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "noticeId",
            "in": "path",
            "required": true,
            "description": "notice id",
            "schema": {
              "type": "string",
              "example": "63ee9215d22829d9f530e6b3"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "img": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": { "type": "string" },
                    "photoURL": { "type": "string" }
                  }
                }
              }
            }
          },
          "401": { "description": "Not authorized or token invalid" },
          "404": { "description": "Notice not found" }
        }
      }
    }
  },
  "definitions": {
    "signupRequest": {
      "type": "object",
      "required": ["name", "email", "password", "city", "phone"],
      "properties": {
        "name": { "type": "string" },
        "email": { "type": "string", "format": "email" },
        "password": { "type": "string" },
        "city": { "type": "string" },
        "phone": { "type": "string" }
      }
    },
    "loginRequest": {
      "type": "object",
      "required": ["email", "password"],
      "properties": {
        "email": { "type": "string", "format": "email" },
        "password": { "type": "string" }
      }
    },
    "emailResponses": {
      "type": "object",
      "required": ["email"],
      "properties": {
        "email": { "type": "string", "format": "email" }
      }
    },
    "updateUserData": {
      "type": "object",
      "description": "all fields are optional",
      "properties": {
        "name": { "type": "string" },
        "email": { "type": "string", "format": "email" },
        "city": { "type": "string" },
        "phone": { "type": "string" },
        "birthday": { "type": "string" }
      }
    },
    "petRequest": {
      "type": "object",
      "required": ["name", "breed"],
      "properties": {
        "name": { "type": "string" },
        "birthday": { "type": "string" },
        "breed": { "type": "string" },
        "comments": { "type": "string" }
      }
    }
  },

  "components": {
    "schemas": {
      "Pets": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "birthday": { "type": "string" },
          "breed": { "type": "string" },
          "comments": { "type": "string" },
          "owner": { "type": "string" },
          "photoURL": { "type": "string" },
          "createdAt": { "type": "string", "format": "date" },
          "updatedAt": { "type": "string", "format": "date" }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "email": { "type": "string", "format": "email" },
          "avatarURL": { "type": "string" },
          "city": { "type": "string" },
          "phone": { "type": "string" },
          "birthday": { "type": "string" },
          "pets": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Pets" }
          }
        }
      },
      "Friends": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "title": { "type": "string" },
            "url": { "type": "string" },
            "addressUrl": { "type": "string" },
            "imageUrl": { "type": "string" },
            "address": { "type": "string" },
            "phone": { "type": "string" },
            "email": { "type": "string", "format": "email" },
            "workDays": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "_id": { "type": "string" },
                  "isOpen": { "type": "boolean" },
                  "from": { "type": "string" },
                  "to": { "type": "string" }
                }
              }
            }
          }
        }
      },
      "News": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "_id": { "type": "string" },
            "title": { "type": "string" },
            "url": { "type": "string" },
            "description": { "type": "string" },
            "date": { "type": "string" }
          }
        }
      },
      "Notices": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Notice"
        }
      },
      "Notice": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "category": { "type": "string" },
          "title": { "type": "string" },
          "name": { "type": "string" },
          "breed": { "type": "string" },
          "sex": { "type": "string" },
          "location": { "type": "string" },
          "price": { "type": "string" },
          "photoURL": { "type": "string" },
          "comments": { "type": "string" },
          "owner": { "type": "string" },
          "favoritesIn": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
